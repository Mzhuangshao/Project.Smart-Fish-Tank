#include "sys.h"

static uint8_t InterFace=0;//页面显示标志位  自动模式下，一页显示不完所有信息，所以分两页显示，0显示第一页，1显示第二页
uint8_t OperateMode=0;//运行模式标志位
uint8_t IndexFlag1=1;//选项索引
uint8_t CursorFlag1=1;//光标索引
uint8_t IndexFlag=1;//选项索引
uint8_t CursorFlag=1;//光标索引
//投喂时间标志位
uint8_t TimeFlag=0;
uint8_t TimeFlag1=0;
//增氧时间标志位
uint8_t STimeFlag=0;
uint8_t STimeFlag1=0;
//增氧和投喂时间切换
uint8_t GoTimeFlag=0;
/******************   	  
功能：模式选择及控制界面
参数：无
返回值：无
******************/
void Mode_Decide(void)//模式判定
{
	
	   Manual_Mode();
    //按键判定
    if(isKey1)//若按键1按下
    {
        isKey1=isKey2=isKey3=isKey4=0;//清除按键按下标志
        oled_Clear();
        OperateMode++;
    }
    else if(isKey2&&(!OperateMode))//若按键2按下,且当前模式为自动模式
    {
        isKey1=isKey2=isKey3=isKey4=0;//清除按键按下标志
        oled_Clear();
        InterFace=!InterFace;
    }
    //标志位限制
    if(OperateMode>=4) OperateMode=0;
    /**根据模式选择显示界面**/
    switch(OperateMode)
    {
        case 0:
            Inform_Show();//显示信息
            AutoContrl();//自动控制
        break;
        
				case 1: 
            Timed_mode();//防盗
				    AutoContrl();//自动控制
        break;
				
        case 2: 
					  AutoContrl();//自动控制
            ThresholdSet();//阈值设置1        
        break;
        
        case 3: 
					 Manual_Contrl();//手动模式
        break;
    }
    
}

/******************   	  
功能：显示界面
参数：无
返回值：无
******************/
void Inform_Show(void) 
	

{			

	      oled_ShowCHinese(16*1,2*0,48);
				oled_ShowCHinese(16*2,2*0,49);
				oled_ShowCHinese(16*3,2*0,50);
				oled_ShowCHinese(16*4,2*0,51);
				oled_ShowCHinese(16*5,2*0,52);
				oled_ShowCHinese(16*6,2*0,53);	
    if(!InterFace)//自动模式页面1
    {		

			
				oled_ShowCHinese(16*0,2*1,0);
				oled_ShowCHinese(16*1,2*1,1);	
				oled_ShowCHinese(16*2,2*1,2);	

				oled_ShowString(16*4,2*1,":",16);
				oled_ShowNum(16*5,2*1,SensorData.Sensor1,2,16);	
				oled_ShowString(16*7,2*1,"%",16);		
				//第二行	光照
				oled_ShowCHinese(16*0,2*2,4);
				oled_ShowCHinese(16*1,2*2,5);	
				oled_ShowCHinese(16*2,2*2,6);	
				oled_ShowCHinese(16*3,2*2,7);	
				oled_ShowString(16*4,2*2,":",16);
				oled_ShowNum(16*5,2*2,SensorData.Sensor2,2,16);	
				oled_ShowString(16*7,2*2,"%",16);	
				//第三行	温度
				oled_ShowCHinese(16*0,2*3,8);
				oled_ShowCHinese(16*1,2*3,9);	
				oled_ShowString(16*4,2*3,":",16);
				oled_ShowNum(16*5,2*3,SensorData.Sensor3,2,16);
				oled_ShowCHinese(16*7,2*3,10);

    }
    else//自动模式页面2
    {
			
				oled_ShowCHinese(16*0,2*1,11);
				oled_ShowCHinese(16*1,2*1,12);	
				oled_ShowString(16*4,2*1,":",16);
				oled_ShowNum(16*5,2*1,SensorData.Sensor4,2,16);
				oled_ShowString(16*7,2*1,"%",16);	


    }

}


/******************   	  
功能：自动控制
参数：无
返回值：无
******************/

void AutoContrl(void)
{
	
   
}

/******************   	  
功能：定时模式
参数：无
返回值：无
******************/
void Timed_mode(){
	
		     oled_ShowCHinese(16*2,2*0,58);
				 oled_ShowCHinese(16*3,2*0,59);
	
	      if(isKey2){
				    TimeFlag++;
					  if(TimeFlag>3){
						TimeFlag=0;
						}
				    isKey2=0;
				}
	   
			 
	
	
//投喂

         
	        oled_ShowCHinese(16*0,2*1,25);
				  oled_ShowCHinese(16*1,2*1,26); 
          oled_ShowString(16*2,2*1,":",16); 
          oled_ShowNum(16*3,2*1,SensorData.Sensor5,2,16);
          oled_ShowCHinese(16*4,2*1,26);
          oled_ShowNum(16*5,2*1,SensorData.Sensor6,2,16);	
	        oled_ShowCHinese(16*6,2*1,27);
	        oled_ShowNum(16*7,2*1,SensorData.Sensor7,2,16);	
	
	
	        oled_ShowCHinese(16*0,2*3,19);
				  oled_ShowCHinese(16*1,2*3,20); 
	        oled_ShowString(16*2,2*3,":",16); 

          if(TimeFlag1==1){
					 	
					oled_ShowCHinese(16*3,2*3,21);
				  oled_ShowCHinese(16*4,2*3,22); 
					}else{
					
			    oled_ShowCHinese(16*3,2*3,23);
				  oled_ShowCHinese(16*4,2*3,24); 
					}

					
					if(GoTimeFlag==0){
						oled_ShowCHinese(16*4,2*0,60);
				    oled_ShowCHinese(16*5,2*0,61); 
					
					}else{
					
					  oled_ShowCHinese(16 * 4, 2 * 0, 13);
            oled_ShowCHinese(16 * 5, 2 * 0, 14);
					}
					
					
	//				
	if(TimeFlag==0){
			oled_ShowString(16*7,2*0,"*",16);
	 if(isKey3){
	  GoTimeFlag=! GoTimeFlag;
		 isKey3=0;
	 }
	
	

	}else oled_ShowString(16*7,2*0,"  ",16);
	 
				
//				
	      if(TimeFlag==1){
			    oled_ShowString(16*3,2*2,"--",16);
					
					if(isKey3){		
					SensorData.Sensor5++;	
					isKey3=0;
					}
          					if(isKey4){		
					SensorData.Sensor5--;	
					isKey4=0;
					}					
				}else{
				 oled_ShowString(16*3,2*2,"  ",16);
				}
				
//				
				if(TimeFlag==2){
			  oled_ShowString(16*5,2*2,"--",16);
					if(isKey3){		
					SensorData.Sensor6++;	
					isKey3=0;
					}
          					if(isKey4){		
					SensorData.Sensor6--;	
					isKey4=0;
					}					
				} else{
				oled_ShowString(16*5,2*2,"  ",16);
				}
      
	//			
			if(TimeFlag==3){
				oled_ShowString(16*7,2*3,"*",16);
			 if(isKey3){
			 TimeFlag1=!TimeFlag1; 	 
			 isKey3=0;
			 
			 }
			 if(isKey4){
			 SensorData.Sensor5=0;
			 SensorData.Sensor6=0;
       SensorData.Sensor7=0;				 
			 isKey4=0;
				 
			 }
			
			}	else    	oled_ShowString(16*7,2*3,"  ",16);
				
				
				
}








/******************   	  
功能：手动控制界面
参数：无
返回值：无
******************/
void Manual_Contrl(void)
{



    /*按键检测*/
    if(isKey2)
    {
        IndexFlag++;
        if(IndexFlag==8) IndexFlag=1;//选项个数限制
        
          if(IndexFlag==1||IndexFlag==5) {CursorFlag=1;}
					 if(IndexFlag==4){CursorFlag=0;}
		       if(IndexFlag==1||IndexFlag==4){oled_Clear();}
          if(IndexFlag==2||IndexFlag==6) CursorFlag=2;
          if(IndexFlag==3||IndexFlag==7) CursorFlag=3;
        isKey2=0;
    }
    if(isKey3)
    {
        if(IndexFlag==1) System.Execute=!System.Execute;
        else if(IndexFlag==2) System.Execute2=!System.Execute2;
        else if(IndexFlag==3) System.Execute5=!System.Execute5;
        else if(IndexFlag==4) System.Execute3=!System.Execute3;
        else if(IndexFlag==5) System.Execute4=!System.Execute4;
        else if(IndexFlag==6) System.Execute6=!System.Execute6;
			  else if(IndexFlag==7) System.Execute7=!System.Execute7;
        isKey3=0;
    }
    if(IndexFlag<=3)//第一页
    {
			
			
    //手动模式
    oled_ShowCHinese(16 * 2, 2 * 0, 66);
    oled_ShowCHinese(16 * 3, 2 * 0, 67);
    oled_ShowCHinese(16 * 4, 2 * 0, 68);
    oled_ShowCHinese(16 * 5, 2 * 0, 69);
			
      //第一行显示换水	判断状态开启或者关闭
    oled_ShowCHinese(16 * 0, 2 * 1, 31);
    oled_ShowCHinese(16 * 1, 2 * 1, 32);
    oled_ShowString(16 * 3, 2 * 1, ":", 16);

    if (System.Execute == 1) {
        oled_ShowCHinese(16 * 4, 2 * 1, 21);
        oled_ShowCHinese(16 * 5, 2 * 1, 22);
    } else {
        oled_ShowCHinese(16 * 4, 2 * 1, 23);
        oled_ShowCHinese(16 * 5, 2 * 1, 24);
    }

    //第二行显示灯光 	判断状态开启或者关闭
    oled_ShowCHinese(16 * 0, 2 * 2, 33);
    oled_ShowCHinese(16 * 1, 2 * 2, 34);
    oled_ShowString(16 * 3, 2 * 2, ":", 16);

    if (System.Execute2 == 1) {
        oled_ShowCHinese(16 * 4, 2 * 2, 21);
        oled_ShowCHinese(16 * 5, 2 * 2, 22);
    } else {
        oled_ShowCHinese(16 * 4, 2 * 2, 23);
        oled_ShowCHinese(16 * 5, 2 * 2, 24);
    }

    //第三行显示加热 	判断状态开启或者关闭
    oled_ShowCHinese(16 * 0, 2 * 3, 35);
    oled_ShowCHinese(16 * 1, 2 * 3, 36);
    oled_ShowString(16 * 3, 2 * 3, ":", 16);

    if (System.Execute5 == 1) {
        oled_ShowCHinese(16 * 4, 2 * 3, 21);
        oled_ShowCHinese(16 * 5, 2 * 3, 22);
    } else {
        oled_ShowCHinese(16 * 4, 2 * 3, 23);
        oled_ShowCHinese(16 * 5, 2 * 3, 24);
    }

 

    }
    else//第二页
    {
			
			
			   //第四行显示加水 判断状态开启或者关闭
    oled_ShowCHinese(16 * 0, 2 * 0, 37);
    oled_ShowCHinese(16 * 1, 2 * 0, 38);
    oled_ShowString(16 * 3, 2 * 0, ":", 16);

    if (System.Execute3 == 1) {
        oled_ShowCHinese(16 * 4, 2 * 0, 21);
        oled_ShowCHinese(16 * 5, 2 * 0, 22);
    } else {
        oled_ShowCHinese(16 * 4, 2 * 0, 23);
        oled_ShowCHinese(16 * 5, 2 * 0, 24);
    }
			
							   //第四行显示投喂 判断状态开启或者关闭
    oled_ShowCHinese(16 * 0, 2 * 1, 60);
    oled_ShowCHinese(16 * 1, 2 * 1, 61);
    oled_ShowString(16 * 3, 2 * 1, ":", 16);

    if (System.Execute3 == 1) {
        oled_ShowCHinese(16 * 4, 2 * 1, 21);
        oled_ShowCHinese(16 * 5, 2 * 1, 22);
    } else {
        oled_ShowCHinese(16 * 4, 2 * 1, 23);
        oled_ShowCHinese(16 * 5, 2 * 1, 24);
    }
    
		
			//增氧
     oled_ShowCHinese(16 * 0, 2 * 2, 13);
     oled_ShowCHinese(16 * 1, 2 * 2, 14);
     oled_ShowString(16 * 3, 2 * 2, ":", 16);

    if (System.Execute4 == 1) {
        oled_ShowCHinese(16 * 4, 2 * 2, 21);
        oled_ShowCHinese(16 * 5, 2 * 2, 22);
    } else {
        oled_ShowCHinese(16 * 4, 2 * 2, 23);
        oled_ShowCHinese(16 * 5, 2 * 2, 24);
    }

    //显示蜂鸣器 判断状态开启或者关闭
    oled_ShowCHinese(16 * 0, 2 * 3, 41);
    oled_ShowCHinese(16 * 1, 2 * 3, 42);
    oled_ShowCHinese(16 * 2, 2 * 3, 43);
    oled_ShowString(16 * 3, 2 * 3, ":", 16);

    if (System.Execute6 == 1) {
        oled_ShowCHinese(16 * 4, 2 * 3, 21);
        oled_ShowCHinese(16 * 5, 2 * 3, 22);
    } else {
        oled_ShowCHinese(16 * 4, 2 * 3, 23);
        oled_ShowCHinese(16 * 5, 2 * 3, 24);
    }
    }
		
		
		if (CursorFlag == 0) {
        oled_ShowString(16 * 7, 2 * 0, "*", 16);
    } else {
        oled_ShowString(16 * 7, 2 * 0, " ", 16);
    }
  if (CursorFlag == 1) {
        oled_ShowString(16 * 7, 2 * 1, "*", 16);
    } else {
        oled_ShowString(16 * 7, 2 * 1, " ", 16);
    }

    //第三行
    if (CursorFlag == 2) {
        oled_ShowString(16 * 7, 2 * 2, "*", 16);
    } else {
        oled_ShowString(16 * 7, 2 * 2, " ", 16);
    }

    //第四行
    if (CursorFlag == 3) { 
        oled_ShowString(16 * 7, 2 * 3, "*", 16);
    } else {
        oled_ShowString(16 * 7, 2 * 3, " ", 16);
    }


}


/******************   	  
功能：阈值设置
参数：无
返回值：无
******************/
void ThresholdSet(void)
{

             //阈值设置
    oled_ShowCHinese(16 * 2, 2 * 0, 62);
    oled_ShowCHinese(16 * 3, 2 * 0, 63);
    oled_ShowCHinese(16 * 4, 2 * 0, 64);
    oled_ShowCHinese(16 * 5, 2 * 0, 65);	
	
    /*按键检测*/
    if(isKey2)
    {
        IndexFlag1++;
        if(IndexFlag1==5) IndexFlag1=1;
        
        if(IndexFlag1==1||IndexFlag1==4) {CursorFlag1=1;oled_Clear();}
        else if(IndexFlag1==2) CursorFlag1=2;
        else if(IndexFlag1==3) CursorFlag1=3;
        isKey2=0;
    }
    else if(isKey3)
    {
        isKey3=0;
        if(IndexFlag1==1) Threshold.Sensor1MAX++;
        else if(IndexFlag1==2) Threshold.Sensor2MAX++;
        else if(IndexFlag1==3) Threshold.Sensor3MAX++;
        else if(IndexFlag1==4) Threshold.Sensor4MAX++;

    }
    else if(isKey4)
    {
        isKey4=0;
        if(IndexFlag1==1) Threshold.Sensor1MAX--;
        else if(IndexFlag1==2) Threshold.Sensor2MAX--;
        else if(IndexFlag1==3) Threshold.Sensor3MAX--;
        else if(IndexFlag1==4) Threshold.Sensor4MAX--;

    }
    
    if(IndexFlag1<=3)//第一页
    {

      //第一行  浑浊度
    oled_ShowCHinese(16 * 0, 2 * 1, 0);
    oled_ShowCHinese(16 * 1, 2 * 1, 1);
    oled_ShowCHinese(16 * 2, 2 * 1, 29);
    oled_ShowCHinese(16 * 3, 2 * 1, 30);
    oled_ShowString(16 * 4, 2 * 1, ":", 16);
    oled_ShowNum(16 * 5, 2 * 1, Threshold.Sensor1MAX, 2, 16);
    //第二行	光照
    oled_ShowCHinese(16 * 0, 2 * 2, 4);
    oled_ShowCHinese(16 * 1, 2 * 2, 5);
    oled_ShowCHinese(16 * 2, 2 * 2, 29);
    oled_ShowCHinese(16 * 3, 2 * 2, 30);
    oled_ShowString(16 * 4, 2 * 2, ":", 16);
    oled_ShowNum(16 * 5, 2 * 2, Threshold.Sensor2MAX, 2, 16);
    //第三行	温度
    oled_ShowCHinese(16 * 0, 2 * 3, 8);
    oled_ShowCHinese(16 * 1, 2 * 3, 9);
    oled_ShowCHinese(16 * 2, 2 * 3, 29);
    oled_ShowCHinese(16 * 3, 2 * 3, 30);
    oled_ShowString(16 * 4, 2 * 3, ":", 16);
    oled_ShowNum(16 * 5, 2 * 3, Threshold.Sensor3MAX, 2, 16);
			
    }
    else//第二页
    {
			
//水位
			
    oled_ShowCHinese(16 * 0, 2 * 1, 11);
    oled_ShowCHinese(16 * 1, 2 * 1, 12);
    oled_ShowCHinese(16 * 2, 2 * 1, 29);
    oled_ShowCHinese(16 * 3, 2 * 1, 30);
    oled_ShowString(16 * 4, 2 * 1, ":", 16);
    oled_ShowNum(16 * 5, 2 * 1, Threshold.Sensor4MAX, 2, 16);
    }        

      if (CursorFlag1 == 1 ) {
        oled_ShowString(16 * 7, 2 * 1, "*", 16);
    } else {
        oled_ShowString(16 * 7, 2 * 1, " ", 16);
    }

    //第三行
    if (CursorFlag1 == 2) {
        oled_ShowString(16 * 7, 2 * 2, "*", 16);
    } else {
        oled_ShowString(16 * 7, 2 * 2, " ", 16);
    }

    //第四行
    if (CursorFlag1 == 3) {
        oled_ShowString(16 * 7, 2 * 3, "*", 16);
    } else {
        oled_ShowString(16 * 7, 2 * 3, " ", 16);
    }

    //阈值限幅   
    if(Threshold.Sensor1MAX>=100)  Threshold.Sensor1MAX=100;
    if(Threshold.Sensor2MAX>=100)  Threshold.Sensor2MAX=100;
    if(Threshold.Sensor3MAX>=100)  Threshold.Sensor3MAX=100;
    if(Threshold.Sensor4MAX>=100)  Threshold.Sensor4MAX=100;
}
void Manual_Mode()
{
	

	
	
    //风扇标志位 1  开启风扇的继电器   0 关闭
    if (System.Execute == 1)   {
        RELAY_Execute_ON;
    }   else  {
        RELAY_Execute_OFF;
    }

    //水泵标志位 1  开启水泵的继电器   0 关闭
    if (System.Execute2 == 1) {
        RELAY_Execute2_ON;
    }	 else {
        RELAY_Execute2_OFF;
    }

    //灯光标志位 1  开启灯光   0 关闭
    if (System.Execute5 == 1) {
        Execute5_ON;
    }  else {
        Execute5_OFF;
    }

    //空调标志位 1  开启空调的继电器   0 关闭
    if (System.Execute3 == 1) {
        RELAY_Execute3_ON;
    } else {
        RELAY_Execute3_OFF;
    }

    //窗帘标志位 1  转90度     0 返回0度
    if (System.Execute4 == 1) {
        Control_SG90(2000);
    } else {
        Control_SG90(500);
    }

    //蜂鸣器标志位  1  开启蜂鸣器   0 关闭
    if (System.Execute6 == 1) {
        Execute6_ON;
    } else {
        Execute6_OFF;
    }
		
		
		
		//定时计算
 if(TimeFlag1==1){
	 TIM_Cmd(TIM1, ENABLE);
	 
if(SensorData.Sensor7==0){
if(SensorData.Sensor6>0){
	SensorData.Sensor6--;
  SensorData.Sensor7=60;
}


else{
	if(SensorData.Sensor5>0){
	SensorData.Sensor5--;
  SensorData.Sensor6=60;		
	 	}else{
	TimeFlag1=0;
	}

}
}

}else{ 
	TIM_Cmd(TIM1, DISABLE); 


} 

		
		
}


